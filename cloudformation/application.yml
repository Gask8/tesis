AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Instance with Load Balancer & K6 Load Testing"

Parameters:
  ProcesorType:
    Type: String
    Default: INTEL
    AllowedValues:
      - INTEL
      - ARM
    Description: EC2 instance type

  InstanceType:
    Type: String
    Default: medium
    AllowedValues:
      - micro
      - small
      - medium
      - large
    Description: EC2 instance type

  VPCStackName:
    Type: String
    Description: Name of the VPC Stack to import values from

  DBInstanceIdentifier:
    Type: String
    Description: RDS Instance Identifier to monitor
    Default: vpc-rdsinstance-dvdpypt42rgk

  K6Quantity:
    Type: Number
    Default: 1
    Description: How many load testins instances are

Conditions:
  IsIntelProcessor: !Equals
    - !Ref ProcesorType
    - INTEL
  IsArmProcessor: !Equals
    - !Ref ProcesorType
    - ARM

Mappings:
  InstanceTypeMap:
    micro:
      INTEL: t3.micro
      ARM: t4g.micro
    small:
      INTEL: t3.small
      ARM: t4g.small
    medium:
      INTEL: t3.medium
      ARM: t4g.medium
    large:
      INTEL: t3.large
      ARM: t4g.large

Resources:
  # IAM Role and Instance Profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3AndSecretsManagerAccessAndCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowPutAndGetObjects
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::gabo-tesis
                  - arn:aws:s3:::gabo-tesis/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref ApplicationSecret
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - ec2:DescribeVolumes
                  - ec2:DescribeTags
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Security Group for EC2 Instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub SG-APP-${ProcesorType}

  ApplicationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub secrets-${ProcesorType}-${VPCStackName}
      Description: "Secret for application database and AWS configuration"
      SecretString: !Sub |
        {
          "DB_HOST": "",
          "DB_PORT": "5432",
          "DB_NAME": "postgres",
          "DB_USER": "postgres",
          "DB_PASSWORD": "",
          "AWS_REGION": "us-east-1",
          "AWS_S3NAME": "gabo-tesis"
        }
      Tags:
        - Key: Environment
          Value: !Ref ProcesorType

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: ApplicationSecret
    Properties:
      InstanceType: !FindInMap
        - InstanceTypeMap
        - !Ref InstanceType
        - !Ref ProcesorType
      ImageId: !If
        - IsIntelProcessor
        - ami-0c7217cdde317cfec # Ubuntu 22.04 LTS for x86
        - ami-07041441b708acbd6 # Ubuntu 22.04 LTS for ARM
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId:
        Fn::ImportValue: !Sub ${VPCStackName}::PrivateSubnet1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
        - Fn::ImportValue: !Sub ${VPCStackName}::SGDBAccess
      Monitoring: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-app
        - Key: CPU
          Value: !Ref ProcesorType
        - Key: TYPE
          Value: COMPUTE
        - Key: auto-delete
          Value: no
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt upgrade -y
          apt install git -y

          # Create ubuntu user if it doesn't exist and set up environment
          useradd -m -s /bin/bash ubuntu || true

          # Continue with system-level installations
          apt install nginx -y
          systemctl start nginx
          systemctl enable nginx

          # Create nginx configuration
          cat << 'EOF' > /etc/nginx/sites-available/redirect
          server {
              listen 80;
              server_name your_domain.com;  # Replace with your domain or IP

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          ln -s /etc/nginx/sites-available/redirect /etc/nginx/sites-enabled/
          mv /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/.default
          nginx -t
          systemctl reload nginx

          # Clone and set up application as ubuntu user
          su - ubuntu << 'EOF'
          cd $HOME

          # NVM installation and Node setup
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 22
          node -v
          npm -v

          git clone https://github.com/gabsalk8/tesis.git
          cd tesis
          echo "SECRET_NAME=secrets-${ProcesorType}-${VPCStackName}" > .env
          npm install -g pm2
          npm install -g typescript
          npm install
          ./scripts/startweb.sh
          EOF

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub SG-LB-${ProcesorType}

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${VPCStackName}::PublicSubnet1
        - Fn::ImportValue: !Sub ${VPCStackName}::PublicSubnet2
      Tags:
        - Key: TYPE
          Value: VPC
        - Key: auto-delete
          Value: no

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: !Sub EC2TargetGroup-${ProcesorType}
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId

  # CloudWatch Dashboard
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ALB Target Response Time",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 6,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ALB Request Count",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 12,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Target 5XX Errors",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 18,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_2XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Target 2XX Success",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 CPU Utilization",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 6,
              "x": 8,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Mem Utilization",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 6,
              "x": 16,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DBInstanceIdentifier}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "RDS CPU Utilization",
                "period": 120
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 12,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Average" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "ALB Response Time Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 12,
              "x": 6,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "ALB Request Count Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 12,
              "x": 12,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "5XX Errors Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 12,
              "x": 18,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_2XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "2XX Success Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 18,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "EC2 CPU Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 18,
              "x": 8,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "EC2 Mem Utilization",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 18,
              "x": 16,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DBInstanceIdentifier}", { "stat": "Average" } ]
                ],
                "view": "table",
                "region": "${AWS::Region}",
                "title": "RDS CPU Data",
                "period": 900,
                "table": {
                    "layout": "vertical"
                }
              }
            }
          ]
        }

  K6SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for K6 load testing with no inbound rules
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-k6-SG

  # Launch Template
  K6LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-020cba7c55df1f615
        InstanceType: t3.micro
        IamInstanceProfile:
          Arn: arn:aws:iam::405894864706:instance-profile/ssmConnection2
        SecurityGroupIds:
          - !Ref K6SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: auto-delete
                Value: "no"
              - Key: Name
                Value: !Sub k6-${ProcesorType}
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt update -y
            apt upgrade -y
            apt install git -y

            useradd -m -s /bin/bash ubuntu || true

            # Create a temporary file with the crontab entries
            cat << 'EOF' > /tmp/crontab_entries
            # load testing (8-17)
            0 6 * * *  cd /home/ubuntu && k6 run tesis/load_testing/loadtest.js -e BASE_URL=http://${ApplicationLoadBalancer.DNSName}/api --out json=logs/test$(date +\%Y\%m\%d_\%H\%M\%S).json
            EOF
            crontab -u ubuntu /tmp/crontab_entries
            rm /tmp/crontab_entries

            su - ubuntu << 'EOF'
            cd $HOME
            mkdir logs
            git clone https://github.com/gabsalk8/tesis.git
            sudo gpg -k
            sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
            sudo echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
            sudo apt-get update
            sudo apt-get install k6
            EOF

  # Auto Scaling Group
  K6AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${VPCStackName}::PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref K6LaunchTemplate
        Version: !GetAtt K6LaunchTemplate.LatestVersionNumber
      MinSize: !Ref K6Quantity
      MaxSize: 10
      DesiredCapacity: !Ref K6Quantity
      Tags:
        - Key: Name
          Value: !Sub k6-${ProcesorType}
          PropagateAtLaunch: true
        - Key: auto-delete
          Value: "no"
          PropagateAtLaunch: true

  # # Schedule for 2 minimum instances at 16:00 and 17:00
  # ScaleUpTo2At16:
  #   Type: AWS::AutoScaling::ScheduledAction
  #   Properties:
  #     AutoScalingGroupName: !Ref K6AutoScalingGroup
  #     MinSize: 2
  #     Recurrence: "45 15 * * *"
  # # Schedule for 3 minimum instances at 18:00 and 19:00
  # ScaleUpTo3At18:
  #   Type: AWS::AutoScaling::ScheduledAction
  #   Properties:
  #     AutoScalingGroupName: !Ref K6AutoScalingGroup
  #     MinSize: 3
  #     Recurrence: "45 17 * * *"
  # # Schedule back to 2 minimum instances at 20:00 and 21:00
  # ScaleBackTo2At20:
  #   Type: AWS::AutoScaling::ScheduledAction
  #   Properties:
  #     AutoScalingGroupName: !Ref K6AutoScalingGroup
  #     MinSize: 2
  #     Recurrence: "45 19 * * *"
  # # Scale down to 1 instance at other times (e.g., 22:00)
  # ScaleDownTo1At22:
  #   Type: AWS::AutoScaling::ScheduledAction
  #   Properties:
  #     AutoScalingGroupName: !Ref K6AutoScalingGroup
  #     MinSize: 1
  #     Recurrence: "0 22 * * *"

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  DashboardURL:
    Description: URL of the created dashboard
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=ApplicationDashboard

  AutoScalingGroupName:
    Description: Name of the Auto Scaling Group
    Value: !Ref K6AutoScalingGroup
