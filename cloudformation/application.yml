AWSTemplateFormatVersion: "2010-09-09"
Description: "EC2 Instance with Load Balancer"

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
    Description: EC2 instance type

  VPCStackName:
    Type: String
    Description: Name of the VPC Stack to import values from

Resources:
  # IAM Role and Instance Profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3AndSecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowPutAndGetObjects
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::gabo-tesis
                  - arn:aws:s3:::gabo-tesis/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: arn:aws:secretsmanager:us-east-1:405894864706:secret:prod-PSZhOu

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Security Group for EC2 Instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: SG-APP

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0c7217cdde317cfec # Ubuntu 22.04 LTS in us-east-1, update as needed
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId:
        Fn::ImportValue: !Sub ${VPCStackName}::PrivateSubnet1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
        - Fn::ImportValue: !Sub ${VPCStackName}::SGDBAccess
      Tags:
        - Key: Name
          Value: prod-app
        - Key: CPU
          Value: INTEL
        - Key: TYPE
          Value: COMPUTE
        - Key: auto-delete
          Value: no
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install git -y

          # Create ubuntu user if it doesn't exist and set up environment
          useradd -m -s /bin/bash ubuntu || true

          # Execute commands as ubuntu user
          su - ubuntu << 'EOF'
          # NVM installation and Node setup
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 22
          node -v
          npm -v
          EOF

          # Continue with system-level installations
          apt install nginx -y
          systemctl start nginx
          systemctl enable nginx

          # Create nginx configuration
          cat << 'EOF' > /etc/nginx/sites-available/redirect
          server {
              listen 80;
              server_name your_domain.com;  # Replace with your domain or IP

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          ln -s /etc/nginx/sites-available/redirect /etc/nginx/sites-enabled/
          mv /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/.default
          nginx -t
          systemctl reload nginx

          # Clone and set up application as ubuntu user
          su - ubuntu << 'EOF'
          cd $HOME
          git clone https://github.com/gabsalk8/tesis.git
          cd tesis
          npm install -g pm2
          npm install -g typescript
          npm install
          ./scripts/startweb.sh
          EOF

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SG-LB

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${VPCStackName}::PublicSubnet1
        - Fn::ImportValue: !Sub ${VPCStackName}::PublicSubnet2
      Tags:
        - Key: TYPE
          Value: VPC
        - Key: auto-delete
          Value: no

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}::VpcId

  # CloudWatch Dashboard
  ApplicationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-Dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ALB Target Response Time",
                "period": 300
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 6,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ALB Request Count",
                "period": 300
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 12,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Target 5XX Errors",
                "period": 300
              }
            },
            {
              "height": 6,
              "width": 6,
              "y": 0,
              "x": 18,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "HTTPCode_Target_2XX_Count", "LoadBalancer", "${ApplicationLoadBalancer.LoadBalancerFullName}", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Target 2XX Success",
                "period": 300
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 6,
              "x": 0,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 CPU Utilization",
                "period": 300
              }
            },
            {
              "height": 6,
              "width": 8,
              "y": 6,
              "x": 8,
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${EC2Instance}", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 Network In",
                "period": 300
              }
            }
            # {
            #   "height": 6,
            #   "width": 8,
            #   "y": 6,
            #   "x": 16,
            #   "type": "metric",
            #   "properties": {
            #     "metrics": [
            #       [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${DBInstanceIdentifier}", { "stat": "Average" } ]
            #     ],
            #     "view": "timeSeries",
            #     "stacked": false,
            #     "region": "${AWS::Region}",
            #     "title": "RDS CPU Utilization",
            #     "period": 300
            #   }
            # }
          ]
        }

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  DashboardURL:
    Description: URL of the created dashboard
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=ApplicationDashboard
